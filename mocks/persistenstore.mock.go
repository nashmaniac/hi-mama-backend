// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nashmaniac/hi-mama/hi-mama-backend/adapters (interfaces: PeristenceStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nashmaniac/hi-mama/hi-mama-backend/models"
)

// MockPeristenceStore is a mock of PeristenceStore interface.
type MockPeristenceStore struct {
	ctrl     *gomock.Controller
	recorder *MockPeristenceStoreMockRecorder
}

// MockPeristenceStoreMockRecorder is the mock recorder for MockPeristenceStore.
type MockPeristenceStoreMockRecorder struct {
	mock *MockPeristenceStore
}

// NewMockPeristenceStore creates a new mock instance.
func NewMockPeristenceStore(ctrl *gomock.Controller) *MockPeristenceStore {
	mock := &MockPeristenceStore{ctrl: ctrl}
	mock.recorder = &MockPeristenceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeristenceStore) EXPECT() *MockPeristenceStoreMockRecorder {
	return m.recorder
}

// CloseDB mocks base method.
func (m *MockPeristenceStore) CloseDB(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB", arg0)
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockPeristenceStoreMockRecorder) CloseDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockPeristenceStore)(nil).CloseDB), arg0)
}

// CreateUser mocks base method.
func (m *MockPeristenceStore) CreateUser(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPeristenceStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPeristenceStore)(nil).CreateUser), arg0, arg1)
}

// FindUserByUsername mocks base method.
func (m *MockPeristenceStore) FindUserByUsername(arg0 context.Context, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockPeristenceStoreMockRecorder) FindUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockPeristenceStore)(nil).FindUserByUsername), arg0, arg1)
}
